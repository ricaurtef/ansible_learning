#!/usr/bin/env ansible-playbook
---
- name: Deploy mezzanine.
  hosts: web
  vars:
    user: '{{ ansible_user }}'
    proj_app: mezzanine_example
    proj_name: '{{ proj_app }}'
    venv_home: '{{ ansible_env.HOME }}/.virtualenvs'
    venv_path: '{{ venv_home }}/{{ proj_name }}'
    proj_path: '{{ ansible_env.HOME }}/mezzanine/{{ proj_name }}'
    settings_path: '{{ proj_path }}/{{ proj_name }}'
    reqs_path: requirements.txt
    manage: '{{ python }} {{ proj_path }}/manage.py'
    live_hostname: 192.168.33.10.xip.io
    domains:
      - 192.168.33.10.xip.io
      - www.192.168.33.10.xip.io
    repo_url: git@gitlab.com:ricaurtef/mezzanine_example.git
    locale: en_US.UTF-8
    conf_path: /etc/nginx/conf
    tls_enabled: True
    python: '{{ venv_path }}/bin/python'
    database_name: '{{ proj_name }}'
    database_user: '{{ proj_name }}'
    database_host: localhost
    database_port: 5432
    gunicorn_procname: gunicorn_mezzanine
    num_workers: 'multiprocessing.cpu_count() * 2 + 1'
  vars_files:
    - secrets.yml
  tasks:
    - name: Install apt packages.
      apt:
        update_cache: yes
        cache_valid_time: 3600
        pkg:
          - git
          - libjpeg-dev
          - libpq-dev
          - memcached
          - nginx
          - postgresql
          - python3-dev
          - python3-pip
          - python-psycopg2
          - python-setuptools
          - supervisor
        state: present
      become: True

    - name: Create project path and logs directory.
      file:
        path: '{{ item }}'
        state: directory
      loop:
        - '{{ proj_path }}'
        - '{{ ansible_env.HOME }}/logs'

    # - name: Check out the repository on the host.
    #   git:
    #     repo: '{{ repo_url }}'
    #     dest: '{{ proj_path }}'
    #     accept_hostkey: yes

    - name: Install Python requirements globally via pip.
      pip:
        name:
          - pip
          - virtualenv
          - virtualenvwrapper
        state: latest
        executable: pip3
      become: True

    - name: Copy requirements.txt file.
      copy:
        src: files/requirements.txt
        dest: '{{ proj_path }}/{{ reqs_path }}'

    - name: Install required python packages.
      pip:
        name:
          - gunicorn
          - setproctitle
          - psycopg2
          - django-compressor
          - python-memcached
        executable: pip3

    - name: Install requirements.txt.
      pip:
        requirements: '{{ proj_path }}/{{ reqs_path }}'
        virtualenv: '{{ venv_path }}'
        virtualenv_python: python3.6

    - name: Apply migrations to create the database, collect static content.
      django_manage:
        command: '{{ item }}'
        app_path: '{{ proj_path }}'
        virtualenv: '{{ venv_path }}'
      loop:
        - migrate
        - collectstatic

    - name: Create project locale.
      locale_gen: 
        name: '{{ locale }}'
      become: True

    - name: Create a DB user.
      postgresql_user:
        name: '{{ database_user }}'
        password: '{{ db_pass }}'
      become: True
      become_user: postgres

    - name: Create the database.
      postgresql_db:
        name: '{{ database_name }}'
        owner: '{{ database_user }}'
        encoding: UTF8
        lc_type: '{{ locale }}'
        lc_collate: '{{ locale }}'
        template: template0
      become: True
      become_user: postgres

    - name: Initialize the database.
      django_manage:
        command: '{{ item }}'
        app_path: '{{ proj_path }}'
        virtualenv: '{{ venv_path }}'
      loop:
        - syncdb
        - collectstatic

    - name: Set the site id.
      script: scripts/setsite.py
      environment:
        PATH: '{{ venv_path }}/bin'
        PROJECT_DIR: '{{ proj_path }}'
        PROJECT_APP: '{{ proj_app }}'
        WEBSITE_DOMAIN: '{{ live_hostname }}'

    - name: Set the admin password.
      script: scripts/setadmin.py
      environment:
        PATH: '{{ venv_path }}/bin'
        PROJECT_DIR: '{{ proj_path }}'
        PROJECT_APP: '{{ proj_app }}'
        ADMIN_PASSWORD: '{{ admin_pass }}'

    - name: Set the gunicorn config file.
      template:
        src: templates/gunicorn.conf.py.j2
        dest: "{{ proj_path }}/gunicorn.conf.py"

    - name: Set the supervisor config file.
      template:
        src: templates/supervisor.conf.j2
        dest: /etc/supervisor/conf.d/mezzanine.conf
      become: True
      notify: restart supervisor

    - name: Set the nginx config file.
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/sites-available/mezzanine.conf
      become: True
      notify: restart nginx

    - name: Enable the nginx config file.
      file:
        src: /etc/nginx/sites-available/mezzanine.conf
        dest: /etc/nginx/sites-enabled/mezzanince.conf
        state: link
      become: True

    - name: Remove the default nginx config file.
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      become: True
      notify: restart nginx

    - name: Ensure config path exists.
      file:
        path: '{{ conf_path }}'
        state: directory
      become: True
      when: tls_enabled

    - name: Create TLS certificates.
      command: >
        openssl req -new -x509 -nodes -out {{ proj_name }}.crt
        -keyout {{ proj_name }}.key -sub '/CN={{ domains[0] }}' -days 3650
      args:
        chdir: '{{ conf_path }}' 
        creates: '{{ conf_path }}/{{ proj_name }}.crt'
      become: True
      when: tls_enabled
      notify: restart nginx

    - name: Install poll twitter cron job.
      cron:
        name: poll twitter
        minute: '*/5'
        user: '{{ user }}'
        job: '{{ manage }} poll_twitter'

  handlers:
    - name: restart supervisor
      supervisorctl:
        name: gunicorn_mezzanine
        state: restarted
      become: True

    - name: restart nginx
      service:
        name: nginx
        state: restarted
      become: True

